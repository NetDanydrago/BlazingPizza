@page "/"
@using BlazingPizza.Client.Services;
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject OrderState OrderState


<div class="main">
    <ul class="pizza-cards">
        @if (Specials != null)
        {
            foreach (var Special in Specials)
            {
                <li @onclick="@(() => OrderState.ShowConfigurePizzaDialog(Special))" style="background-image:url('@Special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@Special.Name</span>
                        @Special.Description
                        <span class="price">
                            @Special.GetFormattedBasePrice()
                        </span>
                    </div>
                </li>
            }
        }
    </ul>
</div>
<div class="sidebar">
    @if (OrderState.Order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Tu Orden</h2>
            @foreach (var ConfiguredPizza in OrderState.Order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="ConfiguredPizza" OnRemoved="@(() => OrderState.removeConfiguredPizza(ConfiguredPizza))" />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Selecciona una Pizza<br />para empezar</div>
    }
    <div class="order-total @(OrderState.Order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@OrderState.Order.GetFormattedTotalPrice()</span>
        <a href="checkout" class="btn btn-warning" disable="@(OrderState.Order.Pizzas.Count == 0)">
            Ordenar >
        </a>
    </div>
</div>




@if (OrderState.ShowConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="OrderState.ConfiguringPizza" OnCancel="OrderState.CancelConfigurePizzaDialog" OnConfirm="OrderState.ConfirmConfigurePizzaDialog" />
}

@code{

    #region Properties    
    List<PizzaSpecial> Specials;
    #endregion

    #region Methods
    //Recuperamos la lista de pizzas mediante la peticion http hacia la api y asemos uso del Metodo GetJSon para manejar la deserealizacion de la respuesta Json
    protected async override Task OnInitializedAsync()
    {
        Specials = await HttpClient.GetJsonAsync<List<PizzaSpecial>>("specials");
    }

    #endregion

    #region Manage Events
    async Task PlaceOrder()
    {

        var NewOrderId  = await HttpClient.PostJsonAsync<int>("orders", OrderState.Order);
        OrderState.ResetOrder();
        NavigationManager.NavigateTo($"myorders/{NewOrderId}");
    }

    #endregion


}
