@inject HttpClient HttpClient

@code {

    #region Properties
    [Parameter]
    public Pizza Pizza { get; set; }

    List<Topping> Toppings;
    #endregion

    #region Events 
    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback OnConfirm { get; set; }
    #endregion

    #region Methods

    protected async override Task OnInitializedAsync()
    {
        Toppings = await HttpClient.GetJsonAsync<List<Topping>>("toppings");
    }

    void AddTopping(Topping topping)
    {
        if(Pizza.Toppings.Find(pt => pt.Topping == topping) == null)
        {
            Pizza.Toppings.Add(new PizzaTopping() { Topping = topping });
        }
    }

    void RemoveTopping(Topping topping)
    {
        Pizza.Toppings.RemoveAll(pt => pt.Topping == topping);
    }

    void ToppingSelected(ChangeEventArgs e)
    {
        if(int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            AddTopping(Toppings[index]);
        }
    }
    #endregion

}

<div class="dialog-container">
    <div class="dialog">
        <div class="dialog-title">
            <h2>@Pizza.Special.Name</h2>
            @Pizza.Special.Description
        </div>
        <form class="dialog-body">
            <div>
                <label>Tamaño:</label>
                <input type="range"
                       min="@Pizza.MinimunSize"
                       max="@Pizza.MaximunSize"
                       step="@Pizza.IncrementSize"
                       @bind="@Pizza.Size"
                       @bind:event="oninput"/>
                  <span class="size-label">
                      @(Pizza.Size) cm ($@(Pizza.GetFormattedTotalPrice()))
                  </span>
            </div>
            <div >
                <label>Complementos adicionales:</label>
                @if(Toppings == null)
                {
                    <select class="custom-select" disabled>
                        <option>(Cargando...)</option>
                    </select>
                }
                else if(Pizza.Toppings.Count >= 6)
                {
                    <div>(maximo alcanzado)</div>
                }
                else
                {
                    <select class="custom-select" @onchange="@ToppingSelected">
                        <option value="-1" disabled selected>(seleciona)</option>
                        @for (var i = 0; i < Toppings.Count; i++)
                        {
                            <option value="@i">
                                @Toppings[i].Name - ($@(Toppings[i].GetFormattedPrice()))
                            </option>
                        }
                    </select>
                }
            </div>
            <div class="toppings">
                @foreach(var topping in Pizza.Toppings)
                {
                    <div class="topping">
                        @topping.Topping.Name
                        <span class="topping-price">
                            @topping.Topping.GetFormattedPrice();
                        </span>
                        <button type="button" class="delete-topping" 
                                @onclick="@(() => RemoveTopping(topping.Topping))">
                            x
                        </button>
                    </div>
                }
            </div>
        </form>
        <div class="dialog-buttons">
            <button class="btn btn-secondary mr-auto" @onclick="OnCancel">Cancelar</button>
        <span class="mr-center">
            precio:
            <span class="price">
                @(Pizza.GetFormattedTotalPrice())
            </span>
        </span>
            <button class="btn btn-success ml-auto" @onclick="OnConfirm" >Ordenar ></button>
        </div>
    </div>
</div>

