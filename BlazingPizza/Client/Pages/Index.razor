@page "/"
@inject HttpClient HttpClient

<div class="main">
    <ul class="pizza-cards">
        @if (Specials != null)
        {
            foreach (var Special in Specials)
            {
                <li @onclick="@(() => ShowConfigurePizzaDialog(Special))" style="background-image:url('@Special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@Special.Name</span>
                        @Special.Description
                        <span class="price">
                            @Special.GetFormattedBasePrice()
                        </span>
                    </div>
                </li>
            }
        }
    </ul>
</div>
<div class="sidebar">
    @if (Order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Tu Orden</h2>
            @foreach (var ConfiguredPizza in Order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="ConfiguredPizza" OnRemoved="@(() => removeConfiguredPizza(ConfiguredPizza))" />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Selecciona una Pizza<br />para empezar</div>
    }
    <div class="order-total @(Order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@Order.GetFormattedTotalPrice()</span>
        <button class="btn btn-warning" disabled="@(Order.Pizzas.Count == 0)" @onclick="@PlaceOrder">
            Ordenar >
        </button>
    </div>
</div>




@if (ShowConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="ConfiguringPizza" OnCancel="CancelConfigurePizzaDialog" OnConfirm="ConfirmConfigurePizzaDialog" />
}

@code{

    #region Properties
    Pizza ConfiguringPizza;
    bool ShowConfigureDialog;
    Order Order = new Order();
    List<PizzaSpecial> Specials;
    #endregion

    #region Methods
    void ShowConfigurePizzaDialog(PizzaSpecial special)
    {
        ConfiguringPizza = new Pizza()
        {
            Special = special,
            SpecialId = special.Id,
            Size = Pizza.DefaultSize,
            Toppings = new List<PizzaTopping>()
        };
        ShowConfigureDialog = true;
    }

    //Recuperamos la lista de pizzas mediante la peticion http hacia la api y asemos uso del Metodo GetJSon para manejar la deserealizacion de la respuesta Json
    protected async override Task OnInitializedAsync()
    {
        Specials = await HttpClient.GetJsonAsync<List<PizzaSpecial>>("specials");
    }

    #endregion

    #region Manage Events

    void CancelConfigurePizzaDialog()
    {
        ConfiguringPizza = null;
        ShowConfigureDialog = false;
    }

    void ConfirmConfigurePizzaDialog()
    {
        Order.Pizzas.Add(ConfiguringPizza);
        ConfiguringPizza = null;

        ShowConfigureDialog = false;
    }


    void removeConfiguredPizza(Pizza pizza)
    {
        Order.Pizzas.Remove(pizza);
    }

    async Task PlaceOrder()
    {
        await HttpClient.PostJsonAsync("orders", Order);
        Order = new Order();
    }

    #endregion


}
